# adapters/telegram/wishes/list.py

from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from application.wishes.service import WishService
from infrastructure.db.repositories.wish import WishRepo
from infrastructure.db.repositories.user import UserRepo
from keyboards.reply import main_kb
from keyboards.inline_wishes import build_wish_list

router = Router()

@router.message(lambda m: m.text == "üîç –û—Ç–∫—Ä—ã—Ç—ã–µ")
async def cmd_list_open(msg: Message, state: FSMContext):
    await state.clear()
    svc = WishService(WishRepo())
    wishes = await svc.list_open_wishes(limit=5, offset=0)
    await msg.answer("–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=build_wish_list(wishes, page=0))

@router.callback_query(lambda c: c.data and c.data.startswith("wish:list:"))
async def cb_list_page(cq: CallbackQuery):
    _, _, page_str = cq.data.split(":")
    wishes = await WishService(WishRepo()).list_open_wishes(limit=5, offset=int(page_str)*5)
    await cq.message.edit_text("–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=build_wish_list(wishes, page=int(page_str)))
    await cq.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("wish:show:"))
async def cb_show_wish(cq: CallbackQuery):
    wish_id = int(cq.data.split(":")[2])
    wish = await WishService(WishRepo()).wish_repo.get_by_id(wish_id)

    text = (
        f"üìå –ó–∞—è–≤–∫–∞ #{wish.id}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {wish.id_category}\n"
        f"{wish.description}\n\n"
        f"üí∞ {wish.amount} {wish.currency}\n"
        f"‚è≥ {wish.deadline}\n"
        f"–ê–≤—Ç–æ—Ä: {wish.id_requester}"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="üõ† –í–∑—è—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"wish:take:{wish.id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",       callback_data="wish:list:0")
    kb.button(text="‚ùì –í–æ–ø—Ä–æ—Å",       callback_data=f"wish:ask:{wish.id}")
    kb.adjust(2, 1)
    await cq.message.edit_text(text, reply_markup=kb.as_markup())
    await cq.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("wish:take:"))
async def cb_take_wish(cq: CallbackQuery):
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º user –∏ –±–µ—Ä—ë–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id
    user = await UserRepo().upsert(
        telegram_id=cq.from_user.id,
        username=cq.from_user.username or ""
    )
    wish_id = int(cq.data.split(":")[2])
    try:
        deal = await WishService(WishRepo()).take_wish(wish_id, user.id)
    except Exception as e:
        return await cq.answer(str(e), show_alert=True)

    text = (
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{wish_id} –≤–∑—è—Ç–∞!\n"
        f"ID —Å–¥–µ–ª–∫–∏: {deal.id}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"deal:chat:{deal.id}")
    kb.adjust(1)
    await cq.message.edit_text(text, reply_markup=kb.as_markup())
    await cq.answer()
